{
  "openapi": "3.1.0",
  "info": {
    "title": "Mosaic AI API",
    "description": "Professional-grade video editing workflows powered by AI agents",
    "version": "2.0.0",
    "contact": {
      "email": "adish@mosaic.so"
    }
  },
  "servers": [
    {
      "url": "https://api.mosaic.so"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    },
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/videos/get_upload_url": {
      "get": {
        "summary": "Get video upload URL",
        "description": "Get a pre-signed URL to upload a video directly to cloud storage",
        "operationId": "getUploadUrl",
        "tags": ["Videos"],
        "responses": {
          "200": {
            "description": "Upload URL generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "video_id": {
                      "type": "string",
                      "description": "Unique identifier for the video"
                    },
                    "upload_url": {
                      "type": "string",
                      "description": "Pre-signed URL for uploading the video"
                    }
                  },
                  "required": ["video_id", "upload_url"]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/videos/finalize_upload": {
      "post": {
        "summary": "Finalize video upload",
        "description": "Finalize the video upload process and optionally specify a folder path",
        "operationId": "finalizeUpload",
        "tags": ["Videos"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "video_id": {
                    "type": "string",
                    "description": "The video ID returned from get_upload_url"
                  },
                  "folder_path": {
                    "type": "string",
                    "description": "Optional folder path to organize the video"
                  }
                },
                "required": ["video_id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upload finalized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"],
                      "description": "Status of the operation"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/agent/{agent_id}/run": {
      "post": {
        "summary": "Run an agent",
        "description": "Execute an agent workflow on uploaded videos",
        "operationId": "runAgent",
        "tags": ["Agents"],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "description": "The ID of the agent to run",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "video_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of video IDs to process"
                  },
                  "callback_url": {
                    "type": "string",
                    "description": "Optional webhook URL for status updates"
                  }
                },
                "required": ["video_ids"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent run started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "run_id": {
                      "type": "string",
                      "description": "Unique identifier for this agent run"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/agent_run/{run_id}": {
      "get": {
        "summary": "Get agent run status",
        "description": "Retrieve the current status and outputs of an agent run",
        "operationId": "getAgentRunStatus",
        "tags": ["Agents"],
        "parameters": [
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "description": "The ID of the agent run",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Agent run status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentRunStatus"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/agent/{agent_id}/triggers": {
      "get": {
        "summary": "Get agent trigger",
        "description": "Retrieve the YouTube trigger configured for an agent",
        "operationId": "getAgentTriggers",
        "tags": ["Triggers"],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Triggers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Trigger"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/agent/{agent_id}/triggers/add_youtube_channels": {
      "post": {
        "summary": "Add YouTube channel listeners",
        "description": "Add YouTube channels to monitor for new videos. Creates a trigger if none exist or adds to the existing trigger.",
        "operationId": "addYoutubeListeners",
        "tags": ["Triggers"],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "youtube_channels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of YouTube channel IDs or URLs to monitor"
                  },
                  "trigger_callback_url": {
                    "type": ["string", "null"],
                    "description": "Webhook URL for trigger notifications (replaces existing if set, use null to remove)"
                  }
                },
                "required": ["youtube_channels", "trigger_callback_url"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listeners added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
            }
          }
        }
      },
    "/agent/{agent_id}/triggers/remove_youtube_channels": {
      "post": {
        "summary": "Remove YouTube channel listeners",
        "description": "Remove YouTube channels from monitoring",
        "operationId": "removeYoutubeListeners",
        "tags": ["Triggers"],
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "description": "The ID of the agent",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "youtube_channels": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of YouTube channel IDs or URLs to stop monitoring"
                  }
                },
                "required": ["youtube_channels"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Listeners removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["ok"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentRunStatus": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "ID of the agent that was run"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the agent run started"
          },
          "status": {
            "type": "string",
            "enum": ["running", "completed", "failed"],
            "description": "Current status of the agent run"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoInput"
            },
            "description": "Array of input videos"
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentOutput"
            },
            "description": "Array of output videos"
          }
        }
      },
      "AgentOutput": {
        "type": "object",
        "properties": {
          "video_url": {
            "type": "string",
            "description": "URL to download the output video"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "URL for the video thumbnail"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "description": "When this output was completed"
          }
        }
      },
      "Trigger": {
            "type": "object",
            "properties": {
              "id": {
            "type": "string",
            "description": "Unique identifier for the trigger"
          },
          "type": {
            "type": "string",
            "enum": ["youtube"],
            "description": "Type of trigger"
          },
          "youtube_channels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of YouTube channel URLs (only for YouTube triggers)"
          },
          "callback_url": {
            "type": "string",
            "description": "Webhook URL for trigger notifications"
          }
        }
      },
      "WebhookPayload": {
        "type": "object",
        "properties": {
          "flag": {
            "type": "string",
            "enum": ["RUN_STARTED", "RUN_FINISHED"],
            "description": "Event type"
          },
          "agent_id": {
            "type": "string",
            "description": "ID of the agent"
          },
          "run_id": {
            "type": "string",
            "description": "ID of the agent run"
          },
          "status": {
            "type": "string",
            "enum": ["running", "completed", "failed"],
            "description": "Current status"
          },
          "inputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoInput"
            },
            "description": "Input videos that were processed"
          },
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "video_url": {
                  "type": "string"
                },
                "thumbnail_url": {
                  "type": "string"
                },
                "completed_at": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When this output was completed (present in RUN_FINISHED events)"
                }
              }
            },
            "description": "Output videos (present in RUN_FINISHED events)"
          },
          "triggered_by": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the trigger"
              },
              "type": {
                "type": "string",
                "enum": ["youtube"],
                "description": "Type of trigger"
              },
              "youtube": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "YouTube video ID"
                  },
                  "channel": {
                    "type": "string",
                    "description": "YouTube channel ID"
                  },
                  "title": {
                    "type": "string",
                    "description": "YouTube video title"
                  },
                  "url": {
                    "type": "string",
                    "description": "YouTube video URL"
                  }
                },
                "description": "YouTube-specific metadata"
              }
            },
            "description": "Only present for triggered runs"
          }
        }
      },
      "VideoInput": {
        "type": "object",
        "properties": {
          "video_url": {
            "type": "string",
            "description": "URL of the input video"
          },
          "thumbnail_url": {
            "type": "string",
            "description": "URL of the input video thumbnail"
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication failed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "invalid_api_key"
                },
                "detail": {
                  "type": "string",
                  "example": "Invalid or missing API key"
                }
              }
            }
          }
        }
      },
      "BadRequestError": {
        "description": "Invalid request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "validation_error"
                },
                "detail": {
                  "type": "string",
                  "example": "Missing required field: video_id"
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
        "type": "object",
        "properties": {
          "error": {
                  "type": "string",
                  "example": "not_found"
                },
                "detail": {
                  "type": "string",
                  "example": "Agent not found"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use your API key prefixed with 'Bearer'"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "Use your API key in the X-API-Key header"
      }
    }
  }
}